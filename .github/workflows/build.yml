name: BUILD

on:
  push:
  schedule:
    - cron:  '35 0,12 * * *'
  workflow_dispatch:

jobs:
  buildAUR:
    strategy:
      matrix:
        repos: [ntfysh, ttf-sarasa-gothic-nerd-fonts, glfw-wayland-minecraft-cursorfix, kwin-effect-rounded-corners-git, networkmanager-dmenu-git, code-translucent, 64gram-desktop, prismlauncher-git, linux-wallpaperengine-git]
        include:
          - repos: git-cola
            preinstall-pkgs: "at-spi2-core"

      fail-fast: false
      
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Get latest version from AUR
      id: aur-version
      run: |
        # 获取 AUR 包的最新版本信息
        AUR_INFO=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg=${{matrix.repos}}")
        LATEST_VERSION=$(echo $AUR_INFO | jq -r '.results[0].Version')
        PACKAGE_BASE=$(echo $AUR_INFO | jq -r '.results[0].PackageBase')

        # 尝试修复GitHub Actions无法正确处理冒号带来的问题
        LATEST_VERSION=$(echo "$LATEST_VERSION" | sed 's/:/-colon-/g')
        
        echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
        echo "package_base=${PACKAGE_BASE}" >> $GITHUB_OUTPUT
        echo "Latest version: ${LATEST_VERSION}"
    
    # use cache to speed up build
    - name: restore from cache
      id: cache
      uses: actions/cache@v4
      with:
        key: aur-build-cache
        path:  './*/${{ matrix.repos }}-*${{ steps.aur-version.outputs.latest_version }}*.pkg.tar.zst'

    - name: Free Disk Space (Ubuntu)
      if: steps.cache.outputs.cache-hit != 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: false
    
    - uses: ./build-aur-action
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        repo-name: ${{ matrix.repos }}
        preinstallPkgs: ${{ matrix.preinstall-pkgs }}
    
    - uses: actions/upload-artifact@v4
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ./*/*.pkg.tar.zst
        name: ${{ matrix.repos }}
        if-no-files-found: error
        
    - uses: ncipollo/release-action@v1
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        allowUpdates: true
        tag: "packages"
        artifacts: "./*/*.zst"
        token: ${{ secrets.GITHUB_TOKEN }}

  buildNonAUR:
      strategy:
        matrix:
          PKGBUILDs: [newsflash-git, wezterm-git-noinfo]

        fail-fast: false

      runs-on: ubuntu-latest

      steps:
          - uses: actions/checkout@v3

          - name: Extract version from PKGBUILD
            id: version
            run: |
              source "./${{ matrix.PKGBUILDs }}/PKGBUILD"

              # 尝试修复GitHub Actions无法正确处理冒号带来的问题
              pkgver=$(echo "$pkgver" | sed 's/:/-colon-/g')

              echo "pkgver=${pkgver}" >> $GITHUB_OUTPUT
              echo "pkgname=${pkgname}" >> $GITHUB_OUTPUT

          - name: restore from cache
            id: cache
            uses: actions/cache@v4
            with:
              key: aur-build-cache
              path:  './*/${{ matrix.PKGBUILDs }}-*${{ steps.version.outputs.pkgver }}*.pkg.tar.zst'

          - name: Build Non-AUR packages
            if: steps.cache.outputs.cache-hit != 'true'
            id: makepkg
            uses: ./build-nonaur-action
            with:
              pkgdir: ${{ matrix.PKGBUILDs }}
              aurDeps: true

          - uses: actions/upload-artifact@v4
            if: steps.cache.outputs.cache-hit != 'true'
            with:
              path: ./*/*.pkg.tar.zst
              name: ${{ matrix.PKGBUILDs }}
              if-no-files-found: error

          - uses: ncipollo/release-action@v1
            if: steps.cache.outputs.cache-hit != 'true'
            with:
              allowUpdates: true
              tag: "packages"
              artifacts: ${{ steps.makepkg.outputs.pkgfile0 }}
              token: ${{ secrets.GITHUB_TOKEN }}

  #TODO
  upload:      
    runs-on: ubuntu-latest
    if: always()
    needs: [buildAUR , buildNonAUR]

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        id: download

      - name: Display structure of downloaded files
        run: ls -R ${{ steps.download.outputs.download-path }}

      - uses: ./create-db-action
        with:
          repo_name: gb-cha0s
          gpg-privatekey: ${{ secrets.gpg_private_key }}
          local_path: ${{ steps.download.outputs.download-path }}

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: "packages"
          artifacts: "./upload_packages/*.sig,./upload_packages/*.files,./upload_packages/*.db,./upload_packages/*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
